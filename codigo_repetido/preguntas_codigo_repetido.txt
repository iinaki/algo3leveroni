1) Abstracción de los tests 01 y 02
En los test 01 y 02 hay código repetido. Cuando lo extrajeron crearon algo nuevo. Eso es algo que estaba en la realidad y no estaba representado en nuestro código, por eso teníamos código repetido. ¿Cuál es esa entidad de la realidad que crearon?

Para sacar el codigo repetido de los test 1 y 2 creamos un mensaje llamado #ejecutarElBloque: unBloque tardaMenosQue: unTiempo. Creemos que de esta forma logramos una gran abstraccion del problema, ya que este mensaje puede servir para muchas pruebas diferentes, sin importar el contexto en el que se use. En estas pruebas el bloque de codigo que testeabamos era agregar o quitar a un cliente del libro de clientes.

2) Cómo representar en Smalltalk
¿Cuáles son las formas en que podemos representar entes de la realidad en Smalltalk que conocés? Es decir, ¿qué cosas del lenguaje Smalltalk puedo usar para representar entidades de la realidad?

El principal objetivo del uso de Smalltalk es que permite modelar entidades de la realidad, a estos se les llama objetos y estos a su vez responden a mensajes que definen su comportamiento. Vimos en clase dos paradigmas que nos ayudan a organizar el comportamiento de los objetos: el Paradigma Moderno y el Paradigma Clásico, estos surgen de la necesidad de relacionar a los objetos entre sí ya que es muy común encontrarse con el problema de que dos objetos que no son el mismo hacen las mismas cosas, es decir responden a los mismos mensajes. El Paradigma Moderno habla sobre la programación por prototipos, esto es pensar en un objeto de base para desarrollar otros, y cumpliendo con este paradigma Smalltalk nos presenta la posibilidad de establecer una relación de parentesco entre los objetos con la funcionalidad asChildOf:. Si un objeto es "hijo" de otro, sabrá responder a los mismos mensajes que su padre. Pero Smalltalk en sí no está pensado para la programación por prototipos, sino que está basado en el Paradigma Clásico que habla de la subclasificación. En este paradigma Smalltalk introduce dos tipos de objetos: las instancias, objetos que representan objetos concretos, y las clases, objetos que representan conceptos. Se habla de sublasificación porque se establece una jerarquía del conocimiento, entre los objetos más abstractos a los más concretos, por ejemplo la clase entera o fracción son instancias de la clase número, que a su vez es instancia de la clase objeto.

3) Teoría de Naur
¿Qué relación hay entre sacar código repetido (creando abstracciones) y la teoría del modelo/sistema (del paper de Naur)?

En esencia lo que el paper quiere transmitir es que todo programa es un modelo que representa parte de la realidad, entonces, el codigo debe ser claro, intuitivo y legible. De esta forma garantizamos de que el programa perdure en el tiempo y se le puedan realizar modificaciones de una manera mas sencilla.
Es por esto, que existe una relación entre sacar código repetido y el paper, ya que cuando sacamos código repetido estamos haciendo el programa mas legible e intuitivo por medio de estas abstracciones que generamos. Lo importante esta en que estamos modificando el código sin cambiar el funcionamiento del mismo, de una forma mas clara.
