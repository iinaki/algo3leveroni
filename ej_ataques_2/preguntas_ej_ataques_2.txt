1) Pensamos que agregar el mensaje #noEstaHerido teniendo #estaHerido es un poco redundante, ya que ya hay una forma de obtener la información de si el personaje está herido o no usando el mensaje not. Posiblemente se implemento #noEstaHerido para ser mas claro, pero teniendo la posibilidad de negar el resultado de #EstaHerido parece ser que #noEstaHerido esta de mas.

2) Si tenemos objetos que responden a los mismos mensajes y esos mensajes estan implementados de la misma forma, testear sobre un Combatiente u otro...es indiferente, ya que se comportan de la misma forma ante los mismos mensajes. A su vez, testear las funcionalidades sobre los 3 combatientes podria ser una forma de decir "Ok, funciona todo", seria como un doble chequeo ya que en teoria se deberian comportar de igual manera. Distinto seria que se testee lo mismo para los 3 Combatientes, pero...los mensajes tienen implementaciones diferentes, eso no seria un doble chequeo. Por ejemplo en nuestra implementacion, los 3 Combatientes responden a #recibirDaño, pero Arthas no recibe daño de igual manera que los Orcos, entonces aunque los 3 respondan a #recibirDaño, estaria bien chequear la misma funcionalidad para Arthas y Olgra por ejemplo (ya que Mankrik responde igual que Olgra al mismo mensaje). Igualmente, todo depende del objetivo de los tests, porque ¿que pasa si queremos testear que dos objetos se comportan de igual manera ante ciertos mensajes ? Estos tests son totalmente validos ya que hacen eso, pero si ese no es el objetivo se podrian obviar siempre y cuando uno ya sepa que se comportan de la misma forma.

3) Para modelar el resultado del combate pensamos en guardar como colaboradores internos los Combatientes vivos de cada bando, estos son collections que se van actualizando en cada ronda. Al llegar al final de la batalla se realiza el cálculo de resultado, si ninguna de las collections está vacía se informa que el resultado es indeterminado ya que existen Combatientes vivos en ambos bandos y no hay ganador, y luego si alguna lo está y la otra no, significa que el bando ganador es el que siga con Combatientes vivos, es decir, esa collection IsNotEmpty y la otra collection IsEmpty. Para devolver el resultado lo que nos surgió al principio fue usar números: 0 para indeterminado, 1 para el bando 1, y -1 para el bando 2, más tarde nos dimos cuenta que no se entendía bien qué querían decir los números y los cambiamos por mensajes de texto que resultaron mucho más claros. 
