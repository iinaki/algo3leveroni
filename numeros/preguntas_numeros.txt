1) Aporte de los mensajes de DD
En un double dispatch (DD), ¿qué información aporta cada uno de los dos llamados?

2) Lógica de instanciado
Con lo que vieron y saben hasta ahora, ¿donde les parece mejor tener la lógica de cómo instanciar un objeto? ¿por qué? ¿Y si se crea ese objeto desde diferentes lugares y de diferentes formas? ¿cómo lo resuelven?

3) Nombres de las categorías de métodos
Con lo que vieron y trabajaron hasta ahora, ¿qué criterio están usando para categorizar métodos?

4) Subclass Responsibility
Si todas las subclases saben responder un mismo mensaje, ¿por qué ponemos ese mensaje sólo con un “self subclassResponsibility” en la superclase? ¿para qué sirve?

El mensaje de self subclassResponsibility en la superclase no aporta una funcionalidad extra al funcionamiento de lo que se quiera hacer, pero sirve como ayuda para el programador, ya que si en un futuro crea una nueva subclase y se olvida de crear el mensaje correspondiente, va a saltar un error específico por la subclassResponsibility y va a ser más facil arreglar el codigo.

5) No rompas
¿Por qué está mal/qué problemas trae romper encapsulamiento?

Podemos decir que encapsulamiento es una forma de ocultación de información entre entidades, mostrándose entre ellas solo la información más necesaria.
La no encapsulación no garantiza la integridad de los datos contenidos en el objeto. Por lo tanto, si queremos proteger la información contra modificaciones inesperadas, debemos recurrir al encapsulamiento. A su vez, el encapsulamiento nos brinda un modelo más claro, ya que los objetos responden a sus necesidades y no más allá.
